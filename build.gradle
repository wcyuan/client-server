/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'conanyuan' at '5/7/17 10:34 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
// plugin for protobufs must come after the java plugin
apply plugin: 'com.google.protobuf'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// Gradle plugin for protobufs
// https://github.com/google/protobuf-gradle-plugin
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
  }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    // jeromq
    compile group: 'org.zeromq', name: 'jeromq', version: '0.4.0'
    
    // protobufs
    //compile group: 'com.google.protobuf', name: 'protoc', version: '3.3.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.3.0'
    compile 'io.grpc:grpc-stub:1.0.0-pre2'
    compile 'io.grpc:grpc-protobuf:1.0.0-pre2'

    // Extra proto source files besides the ones residing under
    // "src/main".
    //protobuf files("lib/protos.tar.gz")
    //protobuf fileTree("ext/")
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    // Extra proto source files for test besides the ones residing under
    // "src/test".
    //testProtobuf files("lib/protos-test.tar.gz")
}

// these are added by default.
//
sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        // Unfortunately, seems like we have to manually include these
        // proto output directories.
        // https://github.com/google/protobuf-gradle-plugin/issues/109
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    test {
        proto {
            srcDir 'src/test/proto'
        }
    }
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
  }
  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
  }
}

// Execute main functions like:
// ./gradlew -PmainClass=hwserver execute
// ./gradlew -PmainClass=hwclient execute
task execute(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "hwserver"
}

